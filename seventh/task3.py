# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное
# (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки.
# Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек
# этих двух клеток.В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в
# последний ряд записываются все оставшиеся.Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет
# строку: *****\n*****\n*****.

class Cell:
    def __init__(self, parameter):
        self.number = parameter
    def __str__(self):
        return f'У клетки ячеек: {self.number}'
    def __add__(self, other):
         return Cell(self.number + other.number)
    def __sub__(self, other):
        return Cell(self.number - other.number) if self.number - other.number > 0 else None
    def __mul__(self, other):
        return Cell(self.number * other.number)
    def __truediv__(self, other):
        return Cell(self.number // other.number) if other.number != 0 else None
    def make_order(self, parameter):
        if parameter == 0:
            return f'Error'
        number = self.number
        result = ''
        while number > parameter:
            result += '*' * parameter + '\n'
            number -= parameter
        else: result += '*' * number
        return f'{result}'
my_cell_1 = Cell(10)
my_cell_2 = Cell(4)
print(f'Исходные клетки: {my_cell_1}, {my_cell_2}')
my_cell_3 = my_cell_1 + my_cell_2
print(f'Результат сложения: {my_cell_3}')
my_cell_3 = my_cell_1 - my_cell_2
print(f'Результат вычитания: {my_cell_3}')
my_cell_3 = my_cell_1 * my_cell_2
print(f'Результат умножения: {my_cell_3}')
my_cell_3 = my_cell_1 / my_cell_2
print(f'Результат деления: {my_cell_3}')
print(my_cell_1.make_order(4))